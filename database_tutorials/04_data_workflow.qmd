---
title: "RIBBiTR Data Pulling"
author: "Cob Staines"
date: today
toc: true
format:
  html: 
    code-line-numbers: false
  pdf:
    code-line-numbers: false
    geometry: 
      - top=30mm
      - left=30mm
---

```{r setup, include=FALSE}
library(reticulate)
use_python("/home/cob/miniconda3/envs/ribbitr/bin/python")

```

# Motivation
- Familiarize ourselves with more data manipulation tools
- Run through a complete workflow including: database connection, data discovery, data pulling, and data manipulation

::: {.panel-tabset}

# R Data Manipulation
Let's run through a realistic data scenario from the beginning.

## Setup

These setup steps will all be familiar to you by now.
```{r, message=FALSE}
# minimal packages for RIBBiTR DB data discovery
librarian::shelf(tidyverse, dbplyr, RPostgres, DBI, RIBBiTR-BII/ribbitrrr)

# establish database connection
dbcon = hopToDB("ribbitr")

# load table metadata
mdt = tbl(dbcon, Id("public", "all_tables")) %>%
  filter(table_schema == "survey_data") %>%
  collect()

# load column metadata
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  filter(table_schema == "survey_data") %>%
  collect()
```

## Data discovery and pulling

Suppose we are interested in Capture and BD Swab data. Specifically, we want to compare life-stage bd infection statistics for captured individuals in panama, between species.

Looking at the table metadata, the two observation tables with most of the data of interest are called "capture" and "bd_qpcr_results".

#### Pull capture table

```{r}
# capture table, select, filter
db_capture = tbl(dbcon, Id("survey_data", "capture")) %>%
  select(species_capture,
         body_temp_c,
         life_stage,
         sex,
         capture_animal_state,
         bd_swab_id,
         survey_id)

```

#### Join with support tables, filter to location

```{r}

# create chain object
chain_capture = tbl_chain("capture", mdc)

# join recursively, filter by date
db_capture_chain = tbl_join(dbcon, chain_capture, tbl = db_capture) %>%
  filter(date >= "2015-01-01")

```

#### Join with Bd table
```{r}
db_bd_results = tbl(dbcon, Id("survey_data", "bd_qpcr_results")) %>%
  select(bd_swab_id,
         detected,
         average_target_quant)

db_capture_bd = db_capture_chain %>%
  inner_join(db_bd_results, by="bd_swab_id")
```

#### Explore # of samples by life stage, then filter
```{r}

db_capture_bd %>%
  select(life_stage) %>%
  group_by(life_stage) %>%
  summarise(row_count = n()) %>%
  arrange(desc(row_count)) %>%
  collect()

db_capture_bd_life = db_capture_bd %>%
  filter(life_stage %in% c("juvenile",
                           "subadult",
                           "adult"),
         !is.na(life_stage))

```

#### Explore # of samples by species, then filter

```{r}

(spp_summary = db_capture_bd_life%>%
  select(species_capture) %>%
  group_by(species_capture) %>%
  summarise(sample_count = n()) %>%
  arrange(desc(sample_count)) %>%
  collect())

(spp_list = spp_summary %>%
  filter(sample_count >= 100) %>%
  pull(species_capture))

db_capture_bd_life_spp = db_capture_bd_life %>%
  filter(species_capture %in% spp_list,
         !is.na(species_capture))

```
#### collect data

```{r}

data_capture_bd_query = db_capture_bd_life_spp %>%
  collect()

colnames(data_capture_bd_query)

head(data_capture_bd_query)

```

These data are ready to be analyzed and visualized!
