---
title: "1. Connection Setup"
author: "Cob Staines"
date: today
toc: true
format:
  html: 
    code-line-numbers: false
  pdf:
    code-line-numbers: false
    geometry: 
      - top=30mm
      - left=30mm
      
---

```{r, include=FALSE}
librarian::shelf(reticulate)
# use_python("/home/cob/miniconda3/envs/ribbitr/bin/python")
use_condaenv("ribbitr")
```

*This tutorial is available as a [.qmd on Github](https://github.com/RIBBiTR-BII/ribbitr-data-access/tree/main/tutorial_series).*

# Motivation

-   Connect to the RIBBiTR (or another remote) database with ease and repeatability
-   Manage login credentials for ease and security, so they won't be lost or shared with your code

::: panel-tabset
# R

Here is a quick tutorial to (re)orient ourselves to connecting to the RIBBiTR database useing R/RStudio. If you aren't yet familiar with R/Rstudio, check out this quick [Getting Started tutorial by POSIT](https://docs.posit.co/ide/user/ide/get-started/).

## Store & access your database connection parameters

### Access your local .Renviron file

Your .Renviron file a local file where you can save and reference your login credentials for easy use within R and RStudio, without risking losing them or potentially sharing them on accident when you share your code. A simple way to access your .Renviron file is with the function `usethis::edit_r_environ()`

```{r, eval=FALSE}
install.packages("usethis")

# open your local .Reniron file
usethis::edit_r_environ()
```

### Save connections parameters

Copy the following database connection parameters to your .Renviron file, substituting your login credentials (user & password).

```{r, eval=FALSE}
# RIBBiTR DB credentials
ribbitr.dbname = "ribbitr"
ribbitr.host = "ribbitr.c6p56tuocn5n.us-west-1.rds.amazonaws.com"
ribbitr.port = "5432"
ribbitr.user = "[YOUR-USERNAME-HERE]"
ribbitr.password = "[YOUR-PASSWORD-HERE]"
```

Save and close .Renviron, and restart RStudio.

## Establish database connection

Create a new R project (or .qmd, .Rmd, .R etc.) file where you can follow the tutorial and establish the database connection.

### Load packages

#### Rtools
[Rtools](https://cran.rstudio.com/bin/windows/Rtools/) is required to build R packages locally, as part of this tutorial. Check to see if Rtools is installed by running:

```{r}
Sys.which("make")
```

If this returns a path to the make function (e.g. `/usr/bin/make`), Rtools is installed and you can proceed to the next step. If you return an empty string `""` you will need to [download Rtools](https://cran.rstudio.com/bin/windows/Rtools/) first.

#### Librarian
"librarian" is a package and library management package in R which makes it easier to install, load, update and unload packages to meet dynamic environment needs. There are other ways to download, load, and maintain packages in R (e.g. `install.packages()` and `library()`, but we recommend librarian for its simplicity and portability.

```{r, eval=FALSE}
# install and load "librarian" R package
install.packages("librarian")
```

librarian downloads and loads packages using the `librarian::shelf` function. Below are the minimal recommended packages to establish a connection to the RIBBiTR database.

```{r, echo=TRUE, eval=TRUE}
# update your ribbitrrr package to the latest version
librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

# minimal packages for establishing RIBBiTR DB connection
librarian::shelf(tidyverse, dbplyr, RPostgres, DBI, RIBBiTR-BII/ribbitrrr)


```

### Connect

Now, using the `ribbitrrr:hopToDB()` function, let's establish a connection!

```{r}
# establish database connection
dbcon <- hopToDB("ribbitr")
```

`hopToDB()` returns a database connection object (`dbcon`). Keep track of this, you will call it to explore and pull data later.

## Begin using your connection!

Try out your connection by loading table metadata from the database

```{r}
mdt <- tbl(dbcon, Id("public", "all_tables")) %>%
  collect()
head(mdt)
```

## Disconnect
It is good practice to close your database connection, to let the server know it can stop listening for you (otherwise it will continue to use server resources in anticipation of your). You can think of this as saying goodbye at the end of a phone call.

```{r}
# disconnect from database
dbDisconnect(dbcon)
```

## Also try

-   For those managing multiple database connections, the `hopToDB()` function allows you to store and fetch various sets of login credentials with a single keyword. Just substitute "ribbitr" in the .Renviron example above with your own keywords to juggle multiple logins.
-   Your login credentials can also be accessed explicitly anytime using `Sys.getenv("ribbitr.dbname")`, etc. In most cases the `hopToDB()` function is all you will need, however.

# Python

Here is a quick tutorial to (re)orient ourselves to connecting to the RIBBiTR database useing Python. If you aren't yet familiar with Python, check out this quick [Getting Started tutorial by DATAQUEST](https://www.dataquest.io/blog/jupyter-notebook-tutorial/).

## Store & access your database connection parameters

### Create a dbconfig file

We recommend you create a local database config (`dbconfig.py`) file where you can save and reference your login credentials for easy use in python, without risking losing them or potentially sharing them on accident when you share your code.

Create a file nammed `dbconfig.py` in your project working directory (or another preferred location, see "Also try" below). Copy the following to `dbconfig.py`:

```{python, message=FALSE}
# dbconfig.py

ribbitr = {
  "database":"ribbitr",
  "host":"ribbitr.c6p56tuocn5n.us-west-1.rds.amazonaws.com",
  "port":"5432",
  "user":"[YOUR-USERNAME-HERE]",
  "password":"[YOUR-PASSWORD-HERE]",
}

```

Save `dbconfig.py`.

Be sure to add `dbconfig.py` to your local `.gitignore` file if you are using git/github, so you don't accidentally publish you login credentials!

## Establish database connection

Create a new .py (or .qmd, .ipynb, etc.) file where you can follow the tutorial and establish the database connection.

### Import packages

This method requires installing the [ibis.postgres](https://ibis-project.org/backends/postgresql) package to your working environment, in addition to pandas. We also import the `dbconfig.py` file to access your login credentials.

```{python, message=FALSE}
import ibis
import pandas as pd
import dbconfig  # import connection credentials
```

### Connect

Now, using the `ibis.postgres.connect()` function, letâ€™s establish a connection!

```{python}
# establish database connection
dbcon = ibis.postgres.connect(**dbconfig.ribbitr)
```

`ibis.postgres.connect()` returns a database connection object (`dbcon`). Keep track of this, you will call it to explore and pull data later.

## Begin using your connection

Try out your connection by loading table metadata from the database

```{python}

mdt = dbcon.table(database = "public", name = "all_tables").to_pandas()
mdt.head()
```

## Disconnect
It is good practice to close your database connection, to let the server know it can stop listening for you (otherwise it will continue to use server resources in anticipation of your). You can think of this as saying goodbye at the end of a phone call.

```{python}
# close the connection
dbcon.disconnect()
```

## Also try

-   For those managing multiple database connections, this method allows you to store and fetch various sets of login credentials with a single keyword. Just substitute "ribbitr" in the `dbconfig.py` file with your own keywords and call them as needed!
-   If you will be connecting to the database from different python projects, you may want to save your `dbconfig.py` file to a more general location. In this case, include the following lines in each of your project files:

```{python, eval=FALSE}
import sys
sys.path.append("/path/to/dbconfig/dir/")
import dbconfig
```

# DBeaver
Here is a quick tutorial to (re)orient ourselves to connecting to the RIBBiTR database useing DBeaver. DBeaver is a free, universal database tool which provides a great visual platform and robust backend for interacting with databases. [Download DBeaver](https://dbeaver.io/) and install to get started with the tutorial.

## Set up and test your connection.
1) Open DBeaver.

2) Right-click in the Database Navigator" panel and select `Create` -> `Connection`

![Right-click in the Database Navigator" panel and select `Create` -> `Connection`](images/DBeaver_connection_setup_01.png)

3) Enter your database credentials as shown above, substituting your user and password.

![Enter your database credentials as shown above, substituting your user and password.](images/DBeaver_connection_setup_02.png)

4) Click `Test Connection` in the bottom left to make sure your credentials work. Then click `OK`.

That's it, you are ready to start using your connection!

## Disconnect
When you are done, click the red `Disconnect` button in top left corner to terminate your connection. 

It is good practice to close your database connection, to let the server know it can stop listening for you (otherwise it will continue to use server resources in anticipation of your). You can think of this as saying goodbye at the end of a phone call.

:::
<div style="text-align: center;">
[2. Data Discovery ->](02_data_discovery.html)
</div>