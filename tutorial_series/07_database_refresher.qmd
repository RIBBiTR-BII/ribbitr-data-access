---
title: "7. Database Refresher"
author: "Cob Staines"
date: today
toc: true
format:
  html: 
    code-line-numbers: false
  pdf:
    code-line-numbers: false
    geometry: 
      - top=30mm
      - left=30mm
---

*This tutorial is available as a [.qmd on Github](https://github.com/RIBBiTR-BII/ribbitr-data-access/tree/main/tutorial_series).*

# Motivation

- Refresh ourselves on how to connect, browse, join, pull, and organize data
- Demonstrate linking data from different datasets

## Resources
To navigate and query the data we need to test our hypothesis, will use the following resources:

- **RIBBiTR Database** - a digital collection of field and lab data from across the RIBBiTR project, hosted on the web and accessible (with a login) via a database client (e.g. DBeaver) or database backend (e.g. dbplyr for R, ibis for Python). This database includes:
  - Data tables - information about field and lab observations
  - Metadata tables - information about how these data are collected, stored, and represented
- [**RIBBiTR Data Access Center**](https://github.com/RIBBiTR-BII/ribbitr-data-access/) - A Github pages website (this one!) for RIBBiTR data access resources, including:
  - Tutorials
  - Schema Diagrams
    - [survey_data](https://ribbitr-bii.github.io/ribbitr-data-access/resources/schema_diagram_survey_data.png)
    - [microclimate_data](https://ribbitr-bii.github.io/ribbitr-data-access/resources/schema_diagram_microclimate_data.png)
  - [Database Changelog](https://ribbitr-bii.github.io/ribbitr-data-access/resources/db_changelog.html)
- [**ribbitrrr (R package)**](https://github.com/RIBBiTR-BII/ribbitrrr) - An R package with a handful of scripts for facilitated interaction with the RIBBiTR database.

## Scenario
Suppose we want to explore a hypothesis that temperature is related to Bd load. Let's explore and collect data from the RIBBiTR database to use in testing our hypothesis.

## R Setup

```{r, message=FALSE}
# minimal packages for RIBBiTR DB data discovery
librarian::shelf(tidyverse, dbplyr, RPostgres, DBI, RIBBiTR-BII/ribbitrrr)

# establish database connection
dbcon <- hopToDB("ribbitr")

# load table metadata
mdt <- tbl(dbcon, Id("public", "all_tables")) %>%
  filter(table_schema == "survey_data") %>%
  collect()

# load column metadata
mdc <- tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  filter(table_schema == "survey_data") %>%
  collect()
```

## Data discovery

The `ribbitrrr:hopToDB()` function used to establish our database connection now supports browsing in the RStudio connections panel, to preview data.

The metadata we downloaded also provides important definitions and context to guide us through these data. Check out `mdt` and `mdc` to get an idea.

Taking a look at the database schema for [survey_data](https://ribbitr-bii.github.io/ribbitr-data-access/resources/schema_diagram_survey_data.png), we might determine that our observation tables of interest are: "bd_qpcr_results", "capture", and "environmental". Let's create "pointers" to these tables, plus the related supporting tables:

### Table pointers

Supported with the R package `dbplyr`, you can think of these table pointers as addresses, an object which points R to where the actual data table is stored on the database, but which you can interact with similar to a data table (with some nuances...)
```{r}
# pointers for all tables of interest
# format var_name = tbl(dbcon, Id(schema_name, table_name))
db_bdqpcr = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

# we will also use the following lookup tables
db_lab = tbl(dbcon, Id("survey_data", "lab"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))

```

### Starting from Captures
Let's begin with our central observation table "capture", with corresponding table pointer `db_capture`. We can always `collect()` or `pull()` the data from the database when we are ready, but there is a lot we can do with the table pointer prior to collecting data to explore them, whittling down our query, to avoid pulling unnecesarily large datasets every time we run a code block:
```{r}
# # to pull data, use...
# data_capture = db_capture %>%
#   collect()
# #... but can we be smarter about how we do this?

# see what columns come from specified tables using the pointer, just like a data table
colnames(db_capture)

# we can count the rows of this table
db_capture %>%
  count()

# left join supporting tables
db_capture_country = db_capture %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id")

# see what columns are available in the joined table pointer
colnames(db_capture_country)

```

### Combining Bd qPCR results with Captures

```{r}
# Two ways we can build on our query abore:

# 1) copy the full code ...
db_bd_country = db_bdqpcr %>%
  left_join(db_sample, by = "sample_id") %>%
  left_join(db_capture, by = "capture_id") %>%  # left_join bd results and capture
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  filter(!is.na(capture_id)) # filter to drop any results with no capture

# ... or 2) build on the `db_capture_country` pointer we defined above
db_bd_country = db_bdqpcr %>%
  left_join(db_sample, by = "sample_id") %>%
  inner_join(db_capture_country, by = "capture_id")  # inner join to include only rows which align between tables

# see what columns our `db_bd_country` table pointer has
colnames(db_bd_country)
```
### Join with environmental observations

We want to include environmental observations like water and air temperature, found in the `environmental` table. To align these with the capture data, let's aggregate and join at the visit level:

```{r}
# view environmental table columns
colnames(db_env)

# join with survey and visit tables, 
db_env_visit = db_env %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  group_by(visit_id) %>%  # aggregate to a single value per visit
  summarise(env_n = n(),
            air_temp_c_mean = mean(air_temp_c, na.rm = TRUE),
            water_temp_c_mean = mean(water_temp_c, na.rm = TRUE))

# left_join db_bd_country with db_env_visit, select desired columns
db_bd_env = db_bd_country %>%
  left_join(db_env_visit, by = "visit_id") %>%
  select(sample_name_bd,
         detected,
         average_target_quant,
         taxon_capture,
         svl_mm,
         body_mass_g,
         sex,
         life_stage,
         substrate_temp_c,
         air_temp_c_mean,
         water_temp_c_mean,
         env_n,
         microhabitat_type,
         time_of_capture,
         date,
         site,
         region,
         country,
         visit_lab,
         extraction_lab,
         qpcr_lab)
```

### Exploring and filtering

```{r}
# count the number of rows in our data table so far
db_bd_env %>%
  count()

# group by region & country, and count each combination
summary_bd_region = db_bd_env %>%
  group_by(life_stage) %>%
  count() %>%
  collect()

# filter to adult life stage (dropping all others)...
db_adult = db_bd_env %>%
  filter(life_stage == "adult",
         !is.na(substrate_temp_c))

# ... and count again
db_adult %>%
  count()

# group by region & country, and count each combination
summary_bd_region = db_adult %>%
  group_by(country, region) %>%
  count() %>%
  collect() %>%
  arrange(country, region)

# define new variable `year`, group by year, count by year
summary_bd_year = db_adult %>%
  mutate(year = year(date)) %>%
  group_by(year) %>%
  count() %>%
  collect() %>%
  arrange(year)
```
## Data pulling
### Collect these data!
Now that we are happy with these data, or at least want to take a closer look at them, lets collect them from the database.
```{r}
# take a look at our SQL "shopping list":
db_adult_query = sql_render(db_adult)

# take our shopping list to the store, return with the data we want
data_adult = db_adult %>%
  collect()

# peek in the bag to see what you got :)
head(data_adult)
```

### Additional exploration: Taxonomy

We can continue using our table pointer "shopping list" to pull in other data. For example, suppose we want some information on the taxa in our dataset:
```{r}
# count distinct taxa
taxa_relevant = db_adult %>%
  group_by(taxon_capture) %>%
  summarise(taxa_count = n()) %>%
  left_join(db_taxa, by = c("taxon_capture" = "taxon_id")) %>%
  collect() %>%
  arrange(desc(taxa_count))

# filter to taxa with more that 50 counts
taxa_gt50 = taxa_relevant %>%
  filter(taxa_count >= 50)

# filter our data to those taxa in our list
db_adult_gt50 = db_adult %>%
  filter(taxon_capture %in% taxa_gt50$taxon_capture)

# collect these newly filtered data
data_adult_gt50 = db_adult_gt50 %>%
  collect()
```

### Get query metadata
Want to refine the column metadata to include columns for your recently queried data only?
```{r}
# use the ribbitrrr::get_query_metadata() function
metadata_adult_gt50 = ribbitrrr::get_query_metadata(dbcon, db_adult_gt50)

```

### Additional exploration: Collaborators!

```{r}
# create a list of unique labs associated with your data
labs_associated = unique(c(data_adult_gt50$visit_lab,
              data_adult_gt50$extraction_lab,
              data_adult_gt50$qpcr_lab))

# look at columns in the labs table for context
colnames(db_lab)

# filter to 
collaborators = db_lab %>%
  filter(lab_id %in% labs_associated) %>%
  collect()
```

###

## Disconnect
When we are done, we can disconnect from the database to reduce server load. You can also disconnect using the connections panel.
```{r}
dbDisconnect(dbcon)
```

<div style="text-align: center;">
[\<- 6. Microclimate Workflow](06_microclimate_workflow.html) \|
</div>